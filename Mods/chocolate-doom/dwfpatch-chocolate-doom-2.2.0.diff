diff -ur chocolate-doom-2.2.0/src/i_sdlsound.c chocolate-doom-2.2.0-dwf/src/i_sdlsound.c
--- chocolate-doom-2.2.0/src/i_sdlsound.c	2015-06-09 22:56:32.000000000 -0400
+++ chocolate-doom-2.2.0-dwf/src/i_sdlsound.c	2015-07-19 20:35:46.737756789 -0400
@@ -23,6 +23,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <assert.h>
+#include <math.h>
 #include "SDL.h"
 #include "SDL_mixer.h"
 
@@ -65,10 +66,6 @@
 static Uint16 mixer_format;
 static int mixer_channels;
 static boolean use_sfx_prefix;
-static boolean (*ExpandSoundData)(sfxinfo_t *sfxinfo,
-                                  byte *data,
-                                  int samplerate,
-                                  int length) = NULL;
 
 // Doubly-linked list of allocated sounds.
 // When a sound is played, it is moved to the head, so that the oldest
@@ -80,14 +77,6 @@
 
 int use_libsamplerate = 0;
 
-// Scale factor used when converting libsamplerate floating point numbers
-// to integers. Too high means the sounds can clip; too low means they
-// will be too quiet. This is an amount that should avoid clipping most
-// of the time: with all the Doom IWAD sound effects, at least. If a PWAD
-// is used, clipping might occur.
-
-float libsamplerate_scale = 0.65f;
-
 // Hook a sound into the linked list at the head.
 
 static void AllocatedSoundLink(allocated_sound_t *snd)
@@ -155,6 +144,11 @@
 {
     allocated_sound_t *snd;
 
+#ifdef HAVE_LIBSAMPLERATE
+    // Refuse to free pre-cached libsamplerate SFX.
+    if (use_libsamplerate) return false;
+#endif
+
     snd = allocated_sounds_tail;
 
     while (snd != NULL)
@@ -326,123 +320,6 @@
     }
 }
 
-// libsamplerate-based generic sound expansion function for any sample rate
-//   unsigned 8 bits --> signed 16 bits
-//   mono --> stereo
-//   samplerate --> mixer_freq
-// Returns number of clipped samples.
-// DWF 2008-02-10 with cleanups by Simon Howard.
-
-static boolean ExpandSoundData_SRC(sfxinfo_t *sfxinfo,
-                                   byte *data,
-                                   int samplerate,
-                                   int length)
-{
-    SRC_DATA src_data;
-    uint32_t i, abuf_index=0, clipped=0;
-//    uint32_t alen;
-    int retn;
-    int16_t *expanded;
-    Mix_Chunk *chunk;
-
-    src_data.input_frames = length;
-    src_data.data_in = malloc(length * sizeof(float));
-    src_data.src_ratio = (double)mixer_freq / samplerate;
-
-    // We include some extra space here in case of rounding-up.
-    src_data.output_frames = src_data.src_ratio * length + (mixer_freq / 4);
-    src_data.data_out = malloc(src_data.output_frames * sizeof(float));
-
-    assert(src_data.data_in != NULL && src_data.data_out != NULL);
-
-    // Convert input data to floats
-
-    for (i=0; i<length; ++i)
-    {
-        // Unclear whether 128 should be interpreted as "zero" or whether a
-        // symmetrical range should be assumed.  The following assumes a
-        // symmetrical range.
-        src_data.data_in[i] = data[i] / 127.5 - 1;
-    }
-
-    // Do the sound conversion
-
-    retn = src_simple(&src_data, SRC_ConversionMode(), 1);
-    assert(retn == 0);
-
-    // Allocate the new chunk.
-
-//    alen = src_data.output_frames_gen * 4;
-
-    chunk = AllocateSound(sfxinfo, src_data.output_frames_gen * 4);
-
-    if (chunk == NULL)
-    {
-        return false;
-    }
-
-    expanded = (int16_t *) chunk->abuf;
-
-    // Convert the result back into 16-bit integers.
-
-    for (i=0; i<src_data.output_frames_gen; ++i)
-    {
-        // libsamplerate does not limit itself to the -1.0 .. 1.0 range on
-        // output, so a multiplier less than INT16_MAX (32767) is required
-        // to avoid overflows or clipping.  However, the smaller the
-        // multiplier, the quieter the sound effects get, and the more you
-        // have to turn down the music to keep it in balance.
-
-        // 22265 is the largest multiplier that can be used to resample all
-        // of the Vanilla DOOM sound effects to 48 kHz without clipping
-        // using SRC_SINC_BEST_QUALITY.  It is close enough (only slightly
-        // too conservative) for SRC_SINC_MEDIUM_QUALITY and
-        // SRC_SINC_FASTEST.  PWADs with interestingly different sound
-        // effects or target rates other than 48 kHz might still result in
-        // clipping--I don't know if there's a limit to it.
-
-        // As the number of clipped samples increases, the signal is
-        // gradually overtaken by noise, with the loudest parts going first.
-        // However, a moderate amount of clipping is often tolerated in the
-        // quest for the loudest possible sound overall.  The results of
-        // using INT16_MAX as the multiplier are not all that bad, but
-        // artifacts are noticeable during the loudest parts.
-
-        float cvtval_f =
-            src_data.data_out[i] * libsamplerate_scale * INT16_MAX;
-        int32_t cvtval_i = cvtval_f + (cvtval_f < 0 ? -0.5 : 0.5);
-
-        // Asymmetrical sound worries me, so we won't use -32768.
-        if (cvtval_i < -INT16_MAX)
-        {
-            cvtval_i = -INT16_MAX;
-            ++clipped;
-        }
-        else if (cvtval_i > INT16_MAX)
-        {
-            cvtval_i = INT16_MAX;
-            ++clipped;
-        }
-
-        // Left and right channels
-
-        expanded[abuf_index++] = cvtval_i;
-        expanded[abuf_index++] = cvtval_i;
-    }
-
-    free(src_data.data_in);
-    free(src_data.data_out);
-
-    if (clipped > 0)
-    {
-        fprintf(stderr, "Sound '%s': clipped %u samples (%0.2f %%)\n", 
-                        sfxinfo->name, clipped,
-                        400.0 * clipped / chunk->alen);
-    }
-
-    return true;
-}
-
 #endif
 
 static boolean ConvertibleRatio(int freq1, int freq2)
@@ -525,12 +402,11 @@
 #endif
 
 // Generic sound expansion function for any sample rate.
-// Returns number of clipped samples (always 0).
 
-static boolean ExpandSoundData_SDL(sfxinfo_t *sfxinfo,
-                                   byte *data,
-                                   int samplerate,
-                                   int length)
+static boolean ExpandSoundData(sfxinfo_t *sfxinfo,
+                               byte *data,
+                               int samplerate,
+                               int length)
 {
     SDL_AudioCVT convertor;
     Mix_Chunk *chunk;
@@ -634,40 +510,47 @@
     return true;
 }
 
-// Load and convert a sound effect
-// Returns true if successful
-
-static boolean CacheSFX(sfxinfo_t *sfxinfo)
+// Load and validate a sound effect lump.
+// Postconditions if sound is valid:
+//     returns true
+//     starred parameters are set, with data_ref pointing to start of sound
+//     caller is responsible for releasing the identified lump
+// Postconditions if sound is invalid:
+//     returns false
+//     starred parameters are garbage
+//     lump already released
+
+static boolean LoadSoundLump(int lumpnum,
+			     int *samplerate,
+			     uint32_t *length,
+			     byte **data_ref)
 {
-    int lumpnum;
-    unsigned int lumplen;
-    int samplerate;
-    unsigned int length;
+    int lumplen;
     byte *data;
 
-    // need to load the sound
+    // Load the sound
 
-    lumpnum = sfxinfo->lumpnum;
-    data = W_CacheLumpNum(lumpnum, PU_STATIC);
+    *data_ref   = W_CacheLumpNum(lumpnum, PU_STATIC);
     lumplen = W_LumpLength(lumpnum);
+    data  = *data_ref;
 
-    // Check the header, and ensure this is a valid sound
+    // Ensure this is a valid sound
 
-    if (lumplen < 8
-     || data[0] != 0x03 || data[1] != 0x00)
+    if (lumplen < 8 || data[0] != 0x03 || data[1] != 0x00)
     {
-        // Invalid sound
-
-        return false;
+	// Invalid sound
+	W_ReleaseLumpNum(lumpnum);
+	return false;
     }
 
     // 16 bit sample rate field, 32 bit length field
 
-    samplerate = (data[3] << 8) | data[2];
-    length = (data[7] << 24) | (data[6] << 16) | (data[5] << 8) | data[4];
+    *samplerate = (data[3] << 8) | data[2];
+    *length = (data[7] << 24) | (data[6] << 16) | (data[5] << 8) | data[4];
 
-    // If the header specifies that the length of the sound is greater than
-    // the length of the lump itself, this is an invalid sound lump
+    // If the header specifies that the length of the sound is
+    // greater than the length of the lump itself, this is an invalid
+    // sound lump.
 
     // We also discard sound lumps that are less than 49 samples long,
     // as this is how DMX behaves - although the actual cut-off length
@@ -675,20 +558,42 @@
     // further investigation to better understand the correct
     // behavior.
 
-    if (length > lumplen - 8 || length <= 48)
+    if (*length > lumplen - 8 || *length <= 48)
     {
-        return false;
+	W_ReleaseLumpNum(lumpnum);
+	return false;
     }
 
+    // Prune header
+    *data_ref += 8;
+
     // The DMX sound library seems to skip the first 16 and last 16
     // bytes of the lump - reason unknown.
 
-    data += 16;
-    length -= 32;
+    *data_ref += 16;
+    *length -= 32;
 
-    // Sample rate conversion
+    return true;
+}
+
+// Load and convert a sound effect
+// Returns true if successful
+
+static boolean CacheSFX(sfxinfo_t *sfxinfo)
+{
+    int samplerate;
+    unsigned int length;
+    byte *data;
+
+#ifdef HAVE_LIBSAMPLERATE
+    assert(!use_libsamplerate); // Pre-cache or die
+#endif
+
+    if (!LoadSoundLump(sfxinfo->lumpnum, &samplerate, &length, &data))
+        return false;
 
-    if (!ExpandSoundData(sfxinfo, data + 8, samplerate, length))
+    // Sample rate conversion
+    if (!ExpandSoundData(sfxinfo, data, samplerate, length))
     {
         return false;
     }
@@ -705,9 +610,7 @@
 #endif
 
     // don't need the original lump any more
-  
-    W_ReleaseLumpNum(lumpnum);
-
+    W_ReleaseLumpNum(sfxinfo->lumpnum);
     return true;
 }
 
@@ -740,7 +643,12 @@
 static void I_SDL_PrecacheSounds(sfxinfo_t *sounds, int num_sounds)
 {
     char namebuf[9];
-    int i;
+    uint32_t sound_i, sample_i;
+    boolean good_sound[num_sounds];
+    float *resampled_sound[num_sounds];
+    uint32_t resampled_sound_length[num_sounds];
+    float norm_factor;
+    float max_amp = 0;
 
     // Don't need to precache the sounds unless we are using libsamplerate.
 
@@ -749,27 +657,121 @@
 	return;
     }
 
-    printf("I_SDL_PrecacheSounds: Precaching all sound effects..");
+    printf("I_SDL_PrecacheSounds: Resampling all sound effects to %d Hz..", mixer_freq);
 
-    for (i=0; i<num_sounds; ++i)
-    {
-        if ((i % 6) == 0)
-        {
-            printf(".");
-            fflush(stdout);
-        }
-
-        GetSfxLumpName(&sounds[i], namebuf, sizeof(namebuf));
+    // Pass 1:  resample all sounds and determine maximum amplitude.
 
-        sounds[i].lumpnum = W_CheckNumForName(namebuf);
+    for (sound_i=0; sound_i<num_sounds; ++sound_i)
+    {
+	good_sound[sound_i] = false;
 
-        if (sounds[i].lumpnum != -1)
-        {
-            CacheSFX(&sounds[i]);
-        }
+	if ((sound_i % 6) == 0)
+	{
+	    printf(".");
+	    fflush(stdout);
+	}
+
+        GetSfxLumpName(&sounds[sound_i], namebuf, sizeof(namebuf));
+	sounds[sound_i].lumpnum = W_CheckNumForName(namebuf);
+	if (sounds[sound_i].lumpnum != -1)
+	{
+	    int samplerate;
+	    uint32_t length;
+	    byte *data;
+	    double of_temp;
+	    int retn;
+	    float *rsound;
+	    uint32_t rlen;
+	    SRC_DATA src_data;
+
+	    if (!LoadSoundLump(sounds[sound_i].lumpnum, &samplerate, &length, &data))
+		continue;
+
+	    assert(length <= LONG_MAX);
+	    src_data.input_frames = length;
+	    src_data.data_in = malloc(length * sizeof(float));
+	    src_data.src_ratio = (double)mixer_freq / samplerate;
+
+	    // mixer_freq / 4 adds a quarter-second safety margin.
+
+	    of_temp = src_data.src_ratio * length + (mixer_freq / 4);
+	    assert(of_temp <= LONG_MAX);
+	    src_data.output_frames = of_temp;
+	    src_data.data_out = malloc(src_data.output_frames * sizeof(float));
+	    assert(src_data.data_in != NULL && src_data.data_out != NULL);
+
+	    // Convert input data to floats
+
+	    for (sample_i=0; sample_i<length; ++sample_i)
+	    {
+		// Unclear whether 128 should be interpreted as "zero" or
+		// whether a symmetrical range should be assumed.  The
+		// following assumes a symmetrical range.
+
+		src_data.data_in[sample_i] = data[sample_i] / 127.5 - 1;
+	    }
+
+	    // don't need the original lump any more
+
+	    W_ReleaseLumpNum(sounds[sound_i].lumpnum);
+
+	    // Resample
+
+	    retn = src_simple(&src_data, SRC_ConversionMode(), 1);
+	    assert(retn == 0);
+	    assert(src_data.output_frames_gen > 0);
+	    resampled_sound[sound_i] = src_data.data_out;
+	    resampled_sound_length[sound_i] = src_data.output_frames_gen;
+	    free(src_data.data_in);
+	    good_sound[sound_i] = true;
+
+	    // Track maximum amplitude for later normalization
+
+	    rsound = resampled_sound[sound_i];
+	    rlen = resampled_sound_length[sound_i];
+	    for (sample_i=0; sample_i<rlen; ++sample_i)
+	    {
+		float fabs_amp = fabsf(rsound[sample_i]);
+		if (fabs_amp > max_amp)
+		    max_amp = fabs_amp;
+	    }
+	}
+    }
+
+    // Pass 2:  normalize and convert to signed 16-bit stereo.
+
+    if (max_amp <= 0)
+	max_amp = 1;
+    norm_factor = INT16_MAX / max_amp;
+
+    for (sound_i=0; sound_i<num_sounds; ++sound_i)
+    {
+	if (good_sound[sound_i])
+	{
+	    uint32_t rlen = resampled_sound_length[sound_i];
+	    int16_t *expanded;
+	    uint32_t abuf_index;
+	    float *rsound;
+	    Mix_Chunk *chunk;
+
+	    chunk = AllocateSound(&sounds[sound_i], rlen * 4);
+	    expanded = (int16_t *) chunk->abuf;
+	    abuf_index=0;
+	    rsound = resampled_sound[sound_i];
+	    for (sample_i=0; sample_i<rlen; ++sample_i)
+	    {
+		float   cvtval_f = norm_factor * rsound[sample_i];
+		int16_t cvtval_i = cvtval_f + (cvtval_f < 0 ? -0.5 : 0.5);
+
+		// Left and right channels
+		expanded[abuf_index++] = cvtval_i;
+		expanded[abuf_index++] = cvtval_i;
+	    }
+	    free(rsound);
+	}
     }
 
-    printf("\n");
+    printf(" scale = %0.2f\n", norm_factor/INT16_MAX);
 }
 
 #else
@@ -999,6 +1001,14 @@
         fprintf(stderr, "Unable to set up sound.\n");
         return false;
     }
+    // DWF SF2 sound font hack
+    if (Mix_Init(MIX_INIT_FLUIDSYNTH) == 0) {
+        fprintf (stderr, "Mix_Init failed\n");
+    }
+    if (Mix_SetSoundFonts("/usr/share/soundfonts/SF2/Scc1t2.sf2") == 0)
+        fprintf (stderr, "Mix_SetSoundFonts failed\n");
+    else
+        printf ("I_SDL_InitSound: sound font loaded OK\n");
 
     if (Mix_OpenAudio(snd_samplerate, AUDIO_S16SYS, 2, GetSliceSize()) < 0)
     {
@@ -1006,8 +1016,6 @@
         return false;
     }
 
-    ExpandSoundData = ExpandSoundData_SDL;
-
     Mix_QuerySpec(&mixer_freq, &mixer_format, &mixer_channels);
 
 #ifdef HAVE_LIBSAMPLERATE
@@ -1018,8 +1026,6 @@
             I_Error("I_SDL_InitSound: Invalid value for use_libsamplerate: %i",
                     use_libsamplerate);
         }
-
-        ExpandSoundData = ExpandSoundData_SRC;
     }
 #else
     if (use_libsamplerate != 0)
@@ -1089,4 +1095,3 @@
     I_SDL_SoundIsPlaying,
     I_SDL_PrecacheSounds,
 };
-
diff -ur chocolate-doom-2.2.0/src/i_sound.c chocolate-doom-2.2.0-dwf/src/i_sound.c
--- chocolate-doom-2.2.0/src/i_sound.c	2015-06-09 22:56:32.000000000 -0400
+++ chocolate-doom-2.2.0-dwf/src/i_sound.c	2015-07-19 20:38:02.027757286 -0400
@@ -434,7 +434,6 @@
 {
     extern char *snd_dmxoption;
     extern int use_libsamplerate;
-    extern float libsamplerate_scale;
 
     M_BindIntVariable("snd_musicdevice",         &snd_musicdevice);
     M_BindIntVariable("snd_sfxdevice",           &snd_sfxdevice);
@@ -455,7 +454,6 @@
 
 #ifdef FEATURE_SOUND
     M_BindIntVariable("use_libsamplerate",       &use_libsamplerate);
-    M_BindFloatVariable("libsamplerate_scale",   &libsamplerate_scale);
 #endif
 
     // Before SDL_mixer version 1.2.11, MIDI music caused the game
diff -ur chocolate-doom-2.2.0/src/i_video.c chocolate-doom-2.2.0-dwf/src/i_video.c
--- chocolate-doom-2.2.0/src/i_video.c	2015-06-09 22:56:32.000000000 -0400
+++ chocolate-doom-2.2.0-dwf/src/i_video.c	2015-07-19 20:30:11.257755557 -0400
@@ -2059,7 +2059,8 @@
             printf("I_InitGraphics: %s (%ix%i within %ix%i)\n",
                    WindowBoxType(screen_mode, w, h),
                    screen_mode->width, screen_mode->height, w, h);
-        }
+        } else
+	    printf("I_InitGraphics: found mode matching %dx%d\n", w, h);
 
         SetVideoMode(screen_mode, w, h);
     }
diff -ur chocolate-doom-2.2.0/src/m_config.c chocolate-doom-2.2.0-dwf/src/m_config.c
--- chocolate-doom-2.2.0/src/m_config.c	2015-06-09 22:56:32.000000000 -0400
+++ chocolate-doom-2.2.0-dwf/src/m_config.c	2015-07-19 20:30:11.257755557 -0400
@@ -1106,18 +1106,6 @@
     CONFIG_VARIABLE_INT(use_libsamplerate),
 
     //!
-    // Scaling factor used by libsamplerate. This is used when converting
-    // sounds internally back into integer form; normally it should not
-    // be necessary to change it from the default value. The only time
-    // it might be needed is if a PWAD file is loaded that contains very
-    // loud sounds, in which case the conversion may cause sound clipping
-    // and the scale factor should be reduced. The lower the value, the
-    // quieter the sound effects become, so it should be set as high as is
-    // possible without clipping occurring.
-
-    CONFIG_VARIABLE_FLOAT(libsamplerate_scale),
-
-    //!
     // Full path to a Timidity configuration file to use for MIDI
     // playback. The file will be evaluated from the directory where
     // it is evaluated, so there is no need to add "dir" commands
diff -ur chocolate-doom-2.2.0/src/setup/sound.c chocolate-doom-2.2.0-dwf/src/setup/sound.c
--- chocolate-doom-2.2.0/src/setup/sound.c	2015-06-09 22:56:32.000000000 -0400
+++ chocolate-doom-2.2.0-dwf/src/setup/sound.c	2015-07-19 20:39:02.237757508 -0400
@@ -92,7 +92,6 @@
 static int voiceVolume = 15;
 static int show_talk = 0;
 static int use_libsamplerate = 0;
-static float libsamplerate_scale = 0.65;
 
 static char *snd_dmxoption = "";
 static char *timidity_cfg_path = NULL;
@@ -363,7 +362,6 @@
     M_BindIntVariable("music_volume",             &musicVolume);
 
     M_BindIntVariable("use_libsamplerate",        &use_libsamplerate);
-    M_BindFloatVariable("libsamplerate_scale",    &libsamplerate_scale);
 
     M_BindIntVariable("gus_ram_kb",               &gus_ram_kb);
     M_BindStringVariable("gus_patch_path",        &gus_patch_path);
